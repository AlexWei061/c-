#include<bits/stdc++.h>
using namespace std;

//                      
const int px[] = { 0, 0, 2,  0, -2, 1,  1, -1, -1, 0, 1,  0, -1 };
const int py[] = { 0, 2, 0, -2,  0, 1, -1,  1, -1, 1, 0, -1,  0 };

int n = 0;
int m = 0;
int gragh[105][105] = { 0 };

struct node{
    int x;
    int y;
}q[100001];

int head = 0;
int tail = 0;

void bfs(int x, int y){
    head = 1;
    tail = 1;
    q[tail].x = x;
    q[tail].y = y;
    tail++;
    gragh[x][y] = 1;
    while(head != tail){
        node t = q[head];
        head++;
        for(int i = 1; i <= 12; i++){
            int nx = t.x + px[i];
            int ny = t.y + py[i];
            if(nx >=1 and nx <= n and ny >= 1 and ny <= m and gragh[nx][ny] == 0){
                gragh[nx][ny] = 1;
                q[tail].x = nx;
                q[tail].y = ny;
                tail++;
            }
        }
    }
}

int main(){
    scanf("%d%d", &n, &m);
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++){
            char c;
            cin >> c;
            if(c == '-'){            //不发光
                gragh[i][j] = 1;
            }
        }
    }
    //bfs(18, 4);
    
    int ans = 0;
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++){
            if(gragh[i][j] == 0){
                bfs(i, j);
                ans++;
            }
        }   
    }
    /*
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++){
            printf("%d ", gragh[i][j]);
        }   
        printf("\n");
    }
    */
    printf("%d\n", ans);
    return 0;
}

/*
19 48
------------------------------------------------
---####-----#-----#----------------------####---
--######----#-----#---------------------######--
-########--#-#---#-#####--#-##-##---#--########-
-###--###--#-#---#-#----#-##-##--#--#--###--###-
-###--###--#--#-#--######-#--#---#-#---###--###-
-########--#--#-#--#------#--#----##---########-
--######---#---#---######-#--#-----#----######--
---####----------------------------#-----####---
----------------------------------#-------------
------------------------------------------------
---###--#--------#------#-----------------------
--#---#-#---------------#-----------------------
-#------#-##--#-##--##-###-#-##-###--###-#--##--
-#------##--#-##-#-#----#--##--#---##---##-#----
-#------#---#-#--#--#---#--#---#---##----#--#---
--#---#-#---#-#--#---#--#--#---#---##---##---#--
---###--#---#-#--#-##---#--#---#---#-###-#-##---
------------------------------------------------
*/